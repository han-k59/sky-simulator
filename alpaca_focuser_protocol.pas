unit alpaca_focuser_protocol;

{$mode objfpc}{$H+}
{$WARN 5024 off : Parameter "$1" not used}
{
Copyright (C) 2021 Patrick Chevalley & Han Kleijn

http://www.ap-i.net
pch@ap-i.net

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

}

{
This unit implement the specific telescope protocol.
For the detail of the requirement for every function see:
https://www.ascom-standards.org/Help/Developer/html/T_ASCOM_DeviceInterface_ITelescopeV3.htm

Beware that many unimplemented result in this example do not respect the ASCOM protocol.
Be sure to test the driver using the ASCOM Conformance Checker Tool to validate the result.
}

interface

uses cu_alpacaFocuser, cu_alpacadevice,  Classes, SysUtils, math;

var
    alpaca_foc_position       : integer=25000;
    alpaca_foc_setpoint: integer=25000;
    alpaca_foc_temperature : double=5;

procedure focuser_simulation; {called each second by a timer}

type
  T_Alpaca_Focuser = class(T_AlpacaFocuser)
    protected
    public
      constructor Create(AOwner: TComponent);override;
      destructor  Destroy; override;
      function  GetGuid: string; override;
      function  GetSetupPage: string; override;
      function  Action( actionName, actionParameters: string):string; override;
      procedure CommandBlind( command: string;  raw: boolean = false); override;
      function  CommandBool(command: string;  raw: boolean = false):boolean; override;
      function  CommandString(command: string;  raw: boolean = false):string; override;
      function  Connected:boolean; override;
      procedure SetConnected(value:boolean); override;
      function  Description:string; override;
      function  DriverInfo:string; override;
      function  DriverVersion:string; override;
      function  InterfaceVersion: integer; override;
      function  Name:string; override;
      function  SupportedActions:TStringList; override;
      function  position: integer; override;
      function  maxstep: integer; override;
      function  maxincrement: integer; override;

      function  fabsolute: boolean; override;
      function  ismoving: boolean; override;
      function  tempcompavailable: boolean; override;
      function  tempcomp: boolean; override;
      function  temperature: double;  override;
      function  stepsize: double;  override;
      procedure focuser_move(x: integer); override;
      procedure set_tempcomp(value:boolean); override;
      procedure foc_halt; override;
  end;


implementation

// Replace the following by the driver UniqueID
// On Linux this can be generated by the command uuidgen
// See the ASCOM Alpaca Management API configureddevices
// https://ascom-standards.org/api/?urls.primaryName=ASCOM%20Alpaca%20Management%20API#/Management%20Interface%20(JSON)/get_management_v1_configureddevices
const guid='focuser_sky_simulator_unique-id';


procedure focuser_simulation; {called by the timer}
var
  deltaPos,stepsize : integer;
begin
  deltaPos:=alpaca_foc_setpoint-alpaca_foc_position;

  stepsize:=min(abs(deltaPos),50); {50 steps per second}
  if deltaPos<0 then
    alpaca_foc_position:=alpaca_foc_position-stepsize
  else
    alpaca_foc_position:=alpaca_foc_position+stepsize;
end;

constructor T_Alpaca_Focuser.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor  T_Alpaca_Focuser.Destroy;
begin
  inherited Destroy;
end;

function  T_Alpaca_Focuser.GetGuid: string;
begin
  result:=guid;
end;

function  T_Alpaca_Focuser.Action( actionName, actionParameters: string):string;
begin
  FErrorNumber:=ERR_NOT_IMPLEMENTED;
  FErrorMessage:=MSG_NOT_IMPLEMENTED;
  result:='';
end;

procedure T_Alpaca_Focuser.CommandBlind( command: string;  raw: boolean = false);
begin
  FErrorNumber:=ERR_NOT_IMPLEMENTED;
  FErrorMessage:=MSG_NOT_IMPLEMENTED;
end;

function  T_Alpaca_Focuser.CommandBool(command: string;  raw: boolean = false):boolean;
begin
  FErrorNumber:=ERR_NOT_IMPLEMENTED;
  FErrorMessage:=MSG_NOT_IMPLEMENTED;
  result:=false;
end;

function  T_Alpaca_Focuser.CommandString(command: string;  raw: boolean = false):string;
begin
  FErrorNumber:=ERR_NOT_IMPLEMENTED;
  FErrorMessage:=MSG_NOT_IMPLEMENTED;
  result:='';
end;

function T_Alpaca_Focuser.GetSetupPage: string;
begin
  result:='<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">'+
       '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8">'+
       '<title>Focuser setup</title></head><body text>'+
       '<H1>Driver Setup</H1><br/>'+
       'There is no Sky Simulator setup information.<br/><br/>'+
       '</body></html>';
end;

function  T_Alpaca_Focuser.Connected:boolean;
begin
  result:=FConnected;
end;

procedure  T_Alpaca_Focuser.SetConnected(value:boolean);
begin
  // code to make connection
  FConnected:=value;
end;

function  T_Alpaca_Focuser.Description:string;
begin
  result:='Sky Simulator focuser simulator';
end;

function  T_Alpaca_Focuser.DriverInfo:string;
begin
  result:='Sky Simulator focuser simulator';
end;

function  T_Alpaca_Focuser.DriverVersion:string;
begin
  result:='v1';
end;

function  T_Alpaca_Focuser.InterfaceVersion: integer;
begin
  result:=3; // ITelescope version implementation
end;

function  T_Alpaca_Focuser.Name:string;
begin
  result:='Focuser Sky Simulator for ALPACA';
end;

function  T_Alpaca_Focuser.SupportedActions:TStringList;
begin
  result:=TStringList.Create;
  result.Clear;
  result.add('focuser_move');
  result.add('Many actions are supported!');
end;

function  T_Alpaca_Focuser.fabsolute: boolean;
begin
  result:=true;
end;

function  T_Alpaca_Focuser.ismoving: boolean;
begin
  result:=abs(alpaca_foc_setpoint-alpaca_foc_position)>=1;
end;

function  T_Alpaca_Focuser.tempcompavailable: boolean;
begin
  result:=false;
end;

function  T_Alpaca_Focuser.tempcomp : boolean;
begin
  result:=false;
end;

function  T_Alpaca_Focuser.temperature: double;
begin
  if alpaca_foc_temperature>7 then alpaca_foc_temperature:=5;{simulation}
  result:=alpaca_foc_temperature;
  alpaca_foc_temperature:=alpaca_foc_temperature+0.5;{simulation}
end;

function  T_Alpaca_Focuser.stepsize: double;
begin
  result:=1;
end;

function  T_Alpaca_Focuser.position: integer;
begin
  result:=alpaca_foc_position;
end;

function  T_Alpaca_Focuser.maxstep: integer;
begin
  result:=65535;
end;

function  T_Alpaca_Focuser.maxincrement: integer;
begin
  result:=65535;
end;

procedure T_Alpaca_Focuser.focuser_move(x: integer);
begin
  alpaca_foc_setpoint:=x;
end;

procedure T_Alpaca_Focuser.set_tempcomp(value:boolean);
begin
  FErrorNumber:=ERR_NOT_IMPLEMENTED;
  FErrorMessage:=MSG_NOT_IMPLEMENTED;
end;

procedure T_Alpaca_Focuser.foc_halt;
begin
  {halt focuser}
  alpaca_foc_setpoint:=alpaca_foc_position;
end;


end.

