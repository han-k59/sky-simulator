unit alpaca_filterwheel_protocol;

{$mode objfpc}{$H+}
{$WARN 5024 off : Parameter "$1" not used}
{
Copyright (C) 2025 Patrick Chevalley & Han Kleijn

http://www.ap-i.net
pch@ap-i.net

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

}

{
This unit implement the specific telescope protocol.
For the detail of the requirement for every function see:
https://www.ascom-standards.org/Help/Developer/html/T_ASCOM_DeviceInterface_ITelescopeV3.htm

Beware that many unimplemented result in this example do not respect the ASCOM protocol.
Be sure to test the driver using the ASCOM Conformance Checker Tool to validate the result.
}

interface

uses cu_alpacaFilterwheel, cu_alpacadevice,  Classes, SysUtils;

var
    alpaca_wheel_position       : integer=0;//luminance


type
  T_Alpaca_filterwheel = class(T_Alpacafilterwheel)
    protected
    public
      constructor Create(AOwner: TComponent);override;
      destructor  Destroy; override;
      function  GetGuid: string; override;
      function  GetSetupPage: string; override;
      function  Action( actionName, actionParameters: string):string; override;
      procedure CommandBlind( command: string;  raw: boolean = false); override;
      function  CommandBool(command: string;  raw: boolean = false):boolean; override;
      function  CommandString(command: string;  raw: boolean = false):string; override;
      function  Connected:boolean; override;
      procedure SetConnected(value:boolean); override;
      function  Description:string; override;
      function  DriverInfo:string; override;
      function  DriverVersion:string; override;
      function  InterfaceVersion: integer; override;
      function  name:string; override;
      function  SupportedActions:TStringList; override;

      function  focusoffsets: Tfocusoffsets; override;
      function  filterNames:TStringList; override;
      function  position: integer; override;
      procedure filterwheel_position(x: integer); override;
  end;


implementation

uses sky_simulator_main;

// Replace the following by the driver UniqueID
// On Linux this can be generated by the command uuidgen
// See the ASCOM Alpaca Management API configureddevices
// https://ascom-standards.org/api/?urls.primaryName=ASCOM%20Alpaca%20Management%20API#/Management%20Interface%20(JSON)/get_management_v1_configureddevices
const guid='filterwheel_sky_simulator_unique-id';



constructor T_Alpaca_filterwheel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor  T_Alpaca_filterwheel.Destroy;
begin
  inherited Destroy;
end;

function  T_Alpaca_filterwheel.GetGuid: string;
begin
  result:=guid;
end;

function  T_Alpaca_filterwheel.Action( actionName, actionParameters: string):string;
begin
  FErrorNumber:=ERR_NOT_IMPLEMENTED;
  FErrorMessage:=MSG_NOT_IMPLEMENTED;
  result:='';
end;

procedure T_Alpaca_filterwheel.CommandBlind( command: string;  raw: boolean = false);
begin
  FErrorNumber:=ERR_NOT_IMPLEMENTED;
  FErrorMessage:=MSG_NOT_IMPLEMENTED;
end;

function  T_Alpaca_filterwheel.CommandBool(command: string;  raw: boolean = false):boolean;
begin
  FErrorNumber:=ERR_NOT_IMPLEMENTED;
  FErrorMessage:=MSG_NOT_IMPLEMENTED;
  result:=false;
end;

function  T_Alpaca_filterwheel.CommandString(command: string;  raw: boolean = false):string;
begin
  FErrorNumber:=ERR_NOT_IMPLEMENTED;
  FErrorMessage:=MSG_NOT_IMPLEMENTED;
  result:='';
end;

function T_Alpaca_filterwheel.GetSetupPage: string;
begin
  result:='<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">'+
       '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8">'+
       '<title>filterwheel setup</title></head><body text>'+
       '<H1>Driver Setup</H1><br/>'+
       'There is no Sky Simulator setup information.<br/><br/>'+
       '</body></html>';
end;

function  T_Alpaca_filterwheel.Connected:boolean;
begin
  result:=FConnected;
end;

procedure  T_Alpaca_filterwheel.SetConnected(value:boolean);
begin
  // code to make connection
  FConnected:=value;
end;

function  T_Alpaca_filterwheel.Description:string;
begin
  result:='Sky Simulator filterwheel simulator';
end;

function  T_Alpaca_filterwheel.DriverInfo:string;
begin
  result:='Sky Simulator filterwheel simulator';
end;

function  T_Alpaca_filterwheel.DriverVersion:string;
begin
  result:='1';
end;

function  T_Alpaca_filterwheel.InterfaceVersion: integer;
begin
  result:=3; // ITelescope version implementation
end;

function  T_Alpaca_filterwheel.name:string;
begin
  result:='Filterwheel Sky Simulator for ALPACA';
end;

function  T_Alpaca_filterwheel.SupportedActions:TStringList;
begin
  result:=TStringList.Create;
  result.Clear;
  result.add('position');
end;


function  T_Alpaca_filterwheel.focusoffsets: Tfocusoffsets;
var offs: array[0..6] of integer=(0,0,0,0,0,0,0);
begin
  with form1 do
  begin
    offs[0]:=updown_1.position;
    offs[1]:=updown_2.position;
    offs[2]:=updown_3.position;
    offs[3]:=updown_4.position;
    offs[4]:=updown_5.position;
    offs[5]:=updown_6.position;
    offs[6]:=updown_7.position;
  end;

  result:=offs;
end;


function  T_Alpaca_filterwheel.filternames:TStringList;
begin
  result:=TStringList.Create;
  result.Clear;
  result.add(form1.filter_1.caption);
  result.add(form1.filter_2.caption);
  result.add(form1.filter_3.caption);
  result.add(form1.filter_4.caption);
  result.add(form1.filter_5.caption);
  result.add(form1.filter_6.caption);
  result.add(form1.filter_7.caption);
end;

function  T_Alpaca_filterwheel.position: integer;
begin
  result:=alpaca_wheel_position;
end;

procedure T_Alpaca_filterwheel.filterwheel_position(x: integer);
begin
  alpaca_wheel_position:=x;
end;

end.

